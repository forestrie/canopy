name: Cloudflare Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - status
      canopy_id:
        description: 'Canopy Instance ID'
        required: true
        default: 'canopy-dev-1'
      forest_project_id:
        description: 'Forest Project ID (external reference)'
        required: true
        default: 'forest-dev-1'

jobs:
  wrangler:
    name: Wrangler ${{ inputs.action }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Install Wrangler
        run: pnpm add -g wrangler

      - name: Authenticate Wrangler
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üîê Authenticating with Cloudflare..."
          wrangler whoami

      - name: Apply Infrastructure
        if: inputs.action == 'apply'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CANOPY_ID: ${{ inputs.canopy_id }}
          R2_BUCKET_NAME: ${{ inputs.canopy_id }}-leaves
          QUEUE_NAME: ${{ inputs.canopy_id }}-ranger
          QUEUE_DLQ_NAME: ${{ inputs.canopy_id }}-ranger-dlq
        run: |
          echo "üöÄ Creating Cloudflare infrastructure with Wrangler..."
          echo "CANOPY_ID: ${CANOPY_ID}"
          echo "R2_BUCKET_NAME: ${R2_BUCKET_NAME}"
          echo "QUEUE_NAME: ${QUEUE_NAME}"
          echo "QUEUE_DLQ_NAME: ${QUEUE_DLQ_NAME}"

          echo "=== Creating R2 Bucket ==="
          wrangler r2 bucket create "${R2_BUCKET_NAME}" --location WEUR || echo "‚úì Bucket already exists"

          echo "=== Creating Queues ==="
          wrangler queues create "${QUEUE_NAME}" || echo "‚úì Queue already exists"
          wrangler queues create "${QUEUE_DLQ_NAME}" || echo "‚úì Dead letter queue already exists"

          echo "‚úÖ Infrastructure created successfully!"

      - name: Configure R2 CORS
        if: inputs.action == 'apply'
        env:
          R2_ADMIN: ${{ secrets.R2_ADMIN }}
          CLOUDFLARE_ACCOUNT_ID: "68f25af297c4235c3f1c47b2f73925b0"
          R2_BUCKET_NAME: ${{ inputs.canopy_id }}-leaves
        run: |
          echo "üìã Configuring CORS for R2 bucket ${R2_BUCKET_NAME}"

          # Configure CORS using Cloudflare API
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/r2/buckets/${R2_BUCKET_NAME}/cors" \
            -H "Authorization: Bearer ${R2_ADMIN}" \
            -H "Content-Type: application/json" \
            --data '{
              "cors_rules": [{
                "allowed_origins": ["http://localhost:5173", "http://localhost:3000", "https://*.vercel.app"],
                "allowed_methods": ["GET", "HEAD", "POST", "PUT"],
                "allowed_headers": ["*"],
                "expose_headers": ["ETag", "Content-Type", "Content-Length"],
                "max_age_seconds": 3600
              }]
            }' \
            --fail-with-body || {
              echo "‚ö†Ô∏è  Failed to configure CORS. This may need to be done manually."
            }

          echo "‚úÖ CORS configuration complete"

      - name: Show Status
        if: inputs.action == 'status'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üìä Cloudflare Infrastructure Status"
          echo "CANOPY_ID: ${{ inputs.canopy_id }}"
          echo ""

          echo "=== R2 Buckets ==="
          wrangler r2 bucket list

          echo ""
          echo "=== Queues ==="
          wrangler queues list

      - name: Destroy Infrastructure
        if: inputs.action == 'destroy'
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CANOPY_ID: ${{ inputs.canopy_id }}
          R2_BUCKET_NAME: ${{ inputs.canopy_id }}-leaves
          QUEUE_NAME: ${{ inputs.canopy_id }}-ranger
          QUEUE_DLQ_NAME: ${{ inputs.canopy_id }}-ranger-dlq
        run: |
          echo "üóëÔ∏è Destroying Cloudflare infrastructure..."
          echo "CANOPY_ID: ${CANOPY_ID}"
          echo "R2_BUCKET_NAME: ${R2_BUCKET_NAME}"
          echo "QUEUE_NAME: ${QUEUE_NAME}"
          echo "QUEUE_DLQ_NAME: ${QUEUE_DLQ_NAME}"

          echo "=== Deleting Queues ==="
          wrangler queues delete "${QUEUE_NAME}" || echo "‚ö†Ô∏è Queue not found"
          wrangler queues delete "${QUEUE_DLQ_NAME}" || echo "‚ö†Ô∏è Dead letter queue not found"

          echo "=== Deleting R2 Bucket ==="
          echo "‚ö†Ô∏è Note: Bucket must be empty to delete"
          wrangler r2 bucket delete "${R2_BUCKET_NAME}" || echo "‚ö†Ô∏è Failed to delete (may not be empty)"

          echo "‚úÖ Infrastructure destruction complete!"

      - name: Display Queue Consumer Instructions
        if: inputs.action == 'apply'
        env:
          QUEUE_NAME: ${{ inputs.canopy_id }}-ranger
          QUEUE_DLQ_NAME: ${{ inputs.canopy_id }}-ranger-dlq
        run: |
          echo "üìã Queue Consumer Setup Required"
          echo "================================"
          echo ""
          echo "The queue consumer for ${QUEUE_NAME} must be set up"
          echo "by the external sequencer project."
          echo ""
          echo "Queue Details:"
          echo "  - Queue Name: ${QUEUE_NAME}"
          echo "  - DLQ Name: ${QUEUE_DLQ_NAME}"
          echo "  - Recommended Settings:"
          echo "    - Max Batch Size: 10"
          echo "    - Max Retries: 3"
          echo "    - Visibility Timeout: 30000ms"
          echo ""
          echo "The external sequencer should use these queue names when setting up consumers."